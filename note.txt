db.Migrator().CreateTable(&Users{})
// db.AutoMigrate(&Tasks{})

// Create table for `User`
db.Migrator().CreateTable(&Users{})

// Append "ENGINE=InnoDB" to the creating table SQL for `User`
db.Set("gorm:table_options", "ENGINE=InnoDB").Migrator().CreateTable(&Users{})

// Check table for `User` exists or not
db.Migrator().HasTable(&Users{})
db.Migrator().HasTable("users")

// Drop table if exists (will ignore or delete foreign key constraints when dropping)
db.Migrator().DropTable(&Users{})
db.Migrator().DropTable("users")

// Add name field
db.Migrator().AddColumn(&Users{}, "Name")

//connect DB
// db, err := gorm.Open(sqlite.Open("user_task_project.db"), &gorm.Config{})
// if err != nil {
// 	panic("failed to connect database")
// }

// dsn := "root:@tcp(127.0.0.1:3306)/user_task_project?charset=utf8mb4&parseTime=True&loc=Local"
// db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})


// endpoint user
	user := r.Group("/user")
	user.Use(authMiddleware.MiddlewareFunc())
	{
		user.POST("/users", userController.InsertUser)
		user.GET("/users", userController.GetUser)
		user.GET("/users/:id", userController.GetUser)
		user.PUT("/users/:id", userController.UpdateUser)
		user.DELETE("/users/:id", userController.DestroyUser)
	}

	// endpoint tasks
	task := r.Group("/task")
	task.Use(authMiddleware.MiddlewareFunc())
	{
		task.POST("/tasks", taskController.InsertTask)
		task.GET("/tasks", taskController.GetTask)
		task.GET("/tasks/:id", taskController.GetTask)
		task.PUT("/tasks/:id", taskController.UpdateTask)
		task.DELETE("/tasks/:id", taskController.DestroyTask)
	}